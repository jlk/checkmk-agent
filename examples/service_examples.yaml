# Service Operations Examples
# This file contains example configurations and use cases for service operations

# Example 1: Service Monitoring Configuration
service_monitoring:
  # List all services for a specific host
  list_host_services:
    command: "checkmk-agent services list server01"
    description: "List all services for server01"
    expected_output: "Found X services for host: server01"
  
  # List all services across all hosts
  list_all_services:
    command: "checkmk-agent services list"
    description: "List all services across all hosts"
    expected_output: "Found X services across Y hosts"
  
  # Get detailed status of a specific service
  get_service_status:
    command: "checkmk-agent services status server01 'CPU utilization'"
    description: "Get detailed status of CPU utilization service"
    expected_output: "Service Status: server01/CPU utilization"

# Example 2: Service Problem Management
service_problem_management:
  # Acknowledge a service problem
  acknowledge_service:
    command: "checkmk-agent services acknowledge server01 'CPU utilization' --comment 'Investigating high CPU usage'"
    description: "Acknowledge CPU utilization problem with comment"
    expected_output: "Acknowledged service problem: server01/CPU utilization"
  
  # Create service downtime
  create_downtime:
    command: "checkmk-agent services downtime server01 'Memory utilization' --hours 4 --comment 'Memory upgrade maintenance'"
    description: "Create 4-hour downtime for memory service"
    expected_output: "Created downtime for service: server01/Memory utilization"

# Example 3: Service Discovery
service_discovery:
  # Discover services on a host
  discover_services:
    command: "checkmk-agent services discover server01"
    description: "Discover services on server01"
    expected_output: "Service discovery completed for host: server01"
  
  # Discover services with specific mode
  discover_services_new:
    command: "checkmk-agent services discover server01 --mode new"
    description: "Discover only new services on server01"
    expected_output: "New services found"

# Example 4: Service Statistics
service_statistics:
  # Get service statistics
  get_stats:
    command: "checkmk-agent services stats"
    description: "Show service statistics across all hosts"
    expected_output: "Service Statistics: Total Hosts: X, Total Services: Y"

# Example 5: Interactive Mode Service Commands
interactive_mode:
  natural_language_commands:
    - command: "list services for server01"
      description: "List services using natural language"
      action: "list_services"
      
    - command: "show all services"
      description: "Show all services across hosts"
      action: "list_services"
      
    - command: "acknowledge CPU load on server01"
      description: "Acknowledge CPU load service problem"
      action: "acknowledge_service"
      
    - command: "create 2 hour downtime for disk space on server01"
      description: "Create downtime for disk space service"
      action: "create_downtime"
      
    - command: "discover services on server01"
      description: "Discover services on a host"
      action: "discover_services"

# Example 6: Service Query Filtering
service_filtering:
  # Filter services by site
  filter_by_site:
    command: "checkmk-agent services list --sites site1,site2"
    description: "List services from specific sites"
    
  # Filter services with Livestatus query
  filter_by_query:
    command: "checkmk-agent services list --query 'state != 0'"
    description: "List only services that are not OK"
    
  # Get specific columns
  specific_columns:
    command: "checkmk-agent services list --columns host_name,description,state"
    description: "Get services with specific columns"

# Example 7: Service States and Emojis
service_states:
  state_mapping:
    OK: "✅ (0)"
    WARN: "⚠️ (1)"
    CRIT: "❌ (2)"
    UNKNOWN: "❓ (3)"
    PENDING: "⏳"
  
  example_output:
    - "✅ server01/CPU utilization - OK"
    - "⚠️ server01/Memory utilization - WARN"
    - "❌ server01/Disk space - CRIT"

# Example 8: Service Discovery Modes
discovery_modes:
  refresh:
    description: "Refresh service discovery (default)"
    usage: "--mode refresh"
    
  new:
    description: "Discover only new services"
    usage: "--mode new"
    
  remove:
    description: "Remove vanished services"
    usage: "--mode remove"
    
  fixall:
    description: "Fix all service issues"
    usage: "--mode fixall"
    
  refresh_autochecks:
    description: "Refresh autochecks"
    usage: "--mode refresh_autochecks"

# Example 9: Error Handling Examples
error_handling:
  service_not_found:
    command: "checkmk-agent services status server01 'NonExistent Service'"
    expected_error: "Service 'NonExistent Service' not found on host 'server01'"
    
  host_not_found:
    command: "checkmk-agent services list nonexistent_host"
    expected_error: "No services found for host: nonexistent_host"
    
  missing_parameters:
    command: "checkmk-agent services acknowledge server01"
    expected_error: "Missing required service description parameter"

# Example 10: Best Practices
best_practices:
  service_naming:
    - "Use descriptive service names that clearly indicate what is being monitored"
    - "Follow consistent naming conventions across your infrastructure"
    - "Use spaces in service names for better readability"
    
  acknowledgment_comments:
    - "Always include meaningful comments when acknowledging problems"
    - "Reference ticket numbers or maintenance windows"
    - "Include expected resolution timeframes"
    
  downtime_scheduling:
    - "Schedule downtime before planned maintenance"
    - "Use appropriate duration based on expected maintenance time"
    - "Include contact information in downtime comments"
    
  service_discovery:
    - "Run service discovery regularly to catch new services"
    - "Review discovered services before accepting them"
    - "Remove vanished services to keep monitoring clean"